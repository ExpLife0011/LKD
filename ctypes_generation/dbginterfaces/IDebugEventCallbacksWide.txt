@IID: 0690E046-9C23-45AC-A04F-987AC29AD0D3
typedef struct IDebugEventCallbacksWideVtbl
        {
            BEGIN_INTERFACE
            // IUnknown.
    HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
        void* this,
        __in REFIID InterfaceId,
        __out PVOID* Interface
        ) ;
    ULONG ( STDMETHODCALLTYPE *AddRef )(
        void* this,
        ) ;
    ULONG ( STDMETHODCALLTYPE *Release )(
        void* this,
        ) ;

    // IDebugEventCallbacksWide.

    // The engine calls GetInterestMask once when
    // the event callbacks are set for a client.
    HRESULT ( STDMETHODCALLTYPE *GetInterestMask )(
        void* this,
        __out PULONG Mask
        ) ;

    // A breakpoint event is generated when
    // a breakpoint exception is received and
    // it can be mapped to an existing breakpoint.
    // The callback method is given a reference
    // to the breakpoint and should release it when
    // it is done with it.
    HRESULT ( STDMETHODCALLTYPE *Breakpoint )(
        void* this,
        __in PDEBUG_BREAKPOINT2 Bp
        ) ;

    // Exceptions include breaks which cannot
    // be mapped to an existing breakpoint
    // instance.
    HRESULT ( STDMETHODCALLTYPE *Exception )(
        void* this,
        __in PEXCEPTION_RECORD64 Exception,
        __in ULONG FirstChance
        ) ;

    // Any of these values can be zero if they
    // cannot be provided by the engine.
    // Currently the kernel does not return thread
    // or process change events.
    HRESULT ( STDMETHODCALLTYPE *CreateThread )(
        void* this,
        __in ULONG64 Handle,
        __in ULONG64 DataOffset,
        __in ULONG64 StartOffset
        ) ;
    HRESULT ( STDMETHODCALLTYPE *ExitThread )(
        void* this,
        __in ULONG ExitCode
        ) ;

    // Any of these values can be zero if they
    // cannot be provided by the engine.
    HRESULT ( STDMETHODCALLTYPE *CreateProcess )(
        void* this,
        __in ULONG64 ImageFileHandle,
        __in ULONG64 Handle,
        __in ULONG64 BaseOffset,
        __in ULONG ModuleSize,
        __in_opt PCWSTR ModuleName,
        __in_opt PCWSTR ImageName,
        __in ULONG CheckSum,
        __in ULONG TimeDateStamp,
        __in ULONG64 InitialThreadHandle,
        __in ULONG64 ThreadDataOffset,
        __in ULONG64 StartOffset
        ) ;
    HRESULT ( STDMETHODCALLTYPE *ExitProcess )(
        void* this,
        __in ULONG ExitCode
        ) ;

    // Any of these values may be zero.
    HRESULT ( STDMETHODCALLTYPE *LoadModule )(
        void* this,
        __in ULONG64 ImageFileHandle,
        __in ULONG64 BaseOffset,
        __in ULONG ModuleSize,
        __in_opt PCWSTR ModuleName,
        __in_opt PCWSTR ImageName,
        __in ULONG CheckSum,
        __in ULONG TimeDateStamp
        ) ;
    HRESULT ( STDMETHODCALLTYPE *UnloadModule )(
        void* this,
        __in_opt PCWSTR ImageBaseName,
        __in ULONG64 BaseOffset
        ) ;

    HRESULT ( STDMETHODCALLTYPE *SystemError )(
        void* this,
        __in ULONG Error,
        __in ULONG Level
        ) ;

    // Session status is synchronous like the other
    // wait callbacks but it is called as the state
    // of the session is changing rather than at
    // specific events so its return value does not
    // influence waiting.  Implementations should just
    // return DEBUG_STATUS_NO_CHANGE.
    // Also, because some of the status
    // notifications are very early or very
    // late in the session lifetime there may not be
    // current processes or threads when the notification
    // is generated.
    HRESULT ( STDMETHODCALLTYPE *SessionStatus )(
        void* this,
        __in ULONG Status
        ) ;

    // The following callbacks are informational
    // callbacks notifying the provider about
    // changes in debug state.  The return value
    // of these callbacks is ignored.  Implementations
    // can not call back into the engine.

    // Debuggee state, such as registers or data spaces,
    // has changed.
    HRESULT ( STDMETHODCALLTYPE *ChangeDebuggeeState )(
        void* this,
        __in ULONG Flags,
        __in ULONG64 Argument
        ) ;
    // Engine state has changed.
    HRESULT ( STDMETHODCALLTYPE *ChangeEngineState )(
        void* this,
        __in ULONG Flags,
        __in ULONG64 Argument
        ) ;
    // Symbol state has changed.
    HRESULT ( STDMETHODCALLTYPE *ChangeSymbolState )(
        void* this,
        __in ULONG Flags,
        __in ULONG64 Argument
        ) ;
            END_INTERFACE
        } IDebugEventCallbacksWideVtbl, *PDEBUG_EVENT_CALLBACKS_WIDE;